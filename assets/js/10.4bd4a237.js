(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{189:function(e,a,t){"use strict";t.r(a);var n=t(0),i=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"c-自带压缩类使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#c-自带压缩类使用"}},[e._v("#")]),e._v(" C# 自带压缩类使用")]),e._v(" "),t("h2",{attrs:{id:"有哪些自带类？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有哪些自带类？"}},[e._v("#")]),e._v(" 有哪些自带类？")]),e._v(" "),t("ul",[t("li",[e._v("ZipFile")])]),e._v(" "),t("p",[e._v("      优点： 可以快速创建和解压压缩包,使用起来较方便")]),e._v(" "),t("p",[e._v("      缺点：只能压缩文件夹，不能选择替换压缩文件或是新增压缩文件")]),e._v(" "),t("div",{staticClass:"language-c# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('           // 压缩文件夹\n           private  void Compress()\n           {\n               var targetFilePath=@"./zipfiles/test";\n               var zipOutputPath=@"./zipfiles/test.zip";\n               ZipFile.CreateFromDirectory(targetFilePath,zipOutputPath,CompressionLevel.Fastest,true);\n           }\n')])])]),t("div",{staticClass:"language-c# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 解压文件\nprivate  void DeCompress()\n        {\n            var zipPath = @"./zipfiles/test.zip";\n            var extractPath = @"./zipfiles/extract";\n            ZipFile.ExtractToDirectory(zipPath, extractPath);\n        }\n')])])]),t("ul",[t("li",[e._v("ZipArchive")])]),e._v(" "),t("p",[e._v("      优点：可以精确控制每个文件的压缩和解压,可以向一个存在的压缩包中添加压缩文件也可以从其中解压出想要的文件")]),e._v(" "),t("p",[e._v("      缺点：需要依赖system.io.compression和system.io.compression.filesystem")]),e._v(" "),t("div",{staticClass:"language-c# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 压缩文件\nprivate  void Compress()\n{\nvar zipFile = @"C:\\data\\myzip.zip";\n        var files = Directory.GetFiles(@"c:\\data");\n\n        using (var archive = ZipFile.Open(zipFile, ZipArchiveMode.Create))\n        {\n           foreach (var fPath in files)\n           {\n              archive.CreateEntryFromFile(fPath, Path.GetFileName(fPath));\n           }\n        }\n}\n')])])]),t("div",{staticClass:"language-c# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 解压文件\nprivate  void DeCompress()\n{\n   var zipPath=@"zipPath";\n   using (ZipArchive archive = ZipFile.OpenRead(zipPath))\n       {\n           foreach (ZipArchiveEntry entry in archive.Entries)\n           {\n               string destinationPath = Path.GetFullPath(Path.Combine(extractPath, entry.FullName));\n               entry.ExtractToFile(destinationPath);               \n           }\n       }\n}\n')])])]),t("ul",[t("li",[e._v("GZipStream")])]),e._v(" "),t("p",[e._v("      优点：可以对文件进行无损解压缩，与DeflateStream相似，但是添加了循环冗余校验保证文件的完整性，被压缩的文件最好不是一个压缩文件，否则会增加流的大小")]),e._v(" "),t("p",[e._v("      缺点：不能向压缩包内添加单个文件或者从压缩包内提取单个文件，通常只能压缩单个文件")]),e._v(" "),t("div",{staticClass:"language-c# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 压缩\nprivate void  Compress()\n{\n    var filePath=@"filepath";\n    using (var fs=new FileStream(filePath,FileMode.Open))\n    {\n        using (FileStream compressedFileStream = File.Create("rseult.gz"))\n            {\n                using (GZipStream compressionStream = new GZipStream(compressedFileStream, \n                   CompressionMode.Compress))\n                {\n                    fs.CopyTo(compressionStream)\n                }\n            }\n    }\n}\n\n// 解压\nprivate void  DeCompress()\n{\n    var filePath=@"filepath";\n    using (FileStream originalFileStream = new FileStream(filePath,FileMode.Open))\n        {\n            using (FileStream decompressedFileStream = File.Create("new file name"))\n            {\n                using (GZipStream decompressionStream = new GZipStream(originalFileStream, CompressionMode.Decompress))\n                {\n                    decompressionStream.CopyTo(decompressedFileStream);\n                }\n            }\n        }\n}\n')])])]),t("ul",[t("li",[e._v("DeflateStream")])]),e._v(" "),t("p",[e._v("      优点：可以对文件进行无损解压缩，被压缩的文件最好不是一个压缩文件，否则会增加流的大小")]),e._v(" "),t("p",[e._v("      缺点：不能向压缩包内添加单个文件或者从压缩包内提取单个文件,不能处理超过4GB的流，压缩出来的文件不能用普通压缩工具打开")]),e._v(" "),t("div",{staticClass:"language-c# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 压缩\nprivate void Compress()\n{\n   var filePath=@"filepath";\n    using (var fs=new FileStream(filePath,FileMode.Open))\n    {\n        using (FileStream compressedFileStream = File.Create("rseult.cmp"))\n            {\n                using (var compressionStream = new DeflateStream(compressedFileStream, \n                   CompressionMode.Compress))\n                {\n                    fs.CopyTo(compressionStream)\n                }\n            }\n    }\n}\n\n// 解压\nprivate void  DeCompress()\n{\n    var filePath=@"filepath";\n    using (FileStream originalFileStream = new FileStream(filePath,FileMode.Open))\n        {\n            using (FileStream decompressedFileStream = File.Create("new file name"))\n            {\n                using (var decompressionStream = new DeflateStream(originalFileStream, CompressionMode.Decompress))\n                {\n                    decompressionStream.CopyTo(decompressedFileStream);\n                }\n            }\n        }\n}\n')])])])])}),[],!1,null,null,null);a.default=i.exports}}]);